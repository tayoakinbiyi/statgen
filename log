'random seed 5754'
{'V_Z': 'simple',
 'd': 0.2,
 'eta': 0.3,
 'numDataSnps': 3,
 'numGrmSnps': 300,
 'numSubjects': 200,
 'numTraits': 50,
 'pedigreeMult': 0.1,
 'seed': 5754,
 'snpParm': 'geneDrop',
 'traitCorrRho': 0.2,
 'traitCorrSource': 'exchangeable'}
'runLimix reml Count [1.]'
'limix : 0.010870553652445476 secs/snp/trait'
'preCompute : 0.006405695915222168 min/trait'
'preScore : 0.10167209307352702 secs/snp'
'preScore : 0.03204491138458252 secs/snp'
'preScore : 0.03046894073486328 secs/snp'
'preScore : 0.03245861530303955 secs/snp'
'preScore : 0.02933933734893799 secs/snp'
'preScore : 0.03114042282104492 secs/snp'
'preScore : 0.030286836624145507 secs/snp'
'preScore : 0.031527161598205566 secs/snp'
'preScore : 0.030429983139038087 secs/snp'
'preScore : 0.028625988960266115 secs/snp'
'preScore : 0.031075692176818846 secs/snp'
'genMonteCarlo : 0.05153298377990723 min'
'monteCarlo : 1.7050902048746745e-05 min'
'diagnostics/ellMC-Y 0 pvals out of bounds'
'markov : 0.001841984854804145 min/snp'
'diagnostics/ellMarkov-Y 0 pvals out of bounds'
('function (test_stats, cor_mat = NULL, pairwise_cors = NULL) \n'
 '{\n'
 '    param_list <- parse_input(test_stats = test_stats, cor_mat = cor_mat, \n'
 '        pairwise_cors = pairwise_cors)\n'
 '    t_vec <- param_list$t_vec\n'
 '    pairwise_cors <- param_list$pairwise_cors\n'
 '    d <- length(t_vec)\n'
 '    if (sum(abs(pairwise_cors)) == 0) {\n'
 '        BJ_output <- BJ(test_stats = t_vec, pairwise_cors = pairwise_cors)\n'
 '        return(list(GBJ = BJ_output$BJ, GBJ_pvalue = BJ_output$BJ_pvalue, \n'
 '            err_code = 0))\n'
 '    }\n'
 '    GBJ_stats <- GBJ_objective(t_vec = t_vec, d = d, pairwise_cors = '
 'pairwise_cors)\n'
 '    gbj <- max(GBJ_stats)\n'
 '    GBJ_p_list <- GBJ_pvalue(observed_gbj = gbj, d = d, pairwise_cors = '
 'pairwise_cors)\n'
 '    GBJ_corp = GBJ_p_list$GBJ_corp\n'
 '    if (is.na(GBJ_corp)) {\n'
 '        BJ_output <- BJ(test_stats = t_vec, pairwise_cors = pairwise_cors)\n'
 '        if (gbj >= 20) {\n'
 '            GBJ_err_code <- "1: Pvalue likely less than 10^(-12), R/C++ not '
 'enough precision. Returning standard Berk-Jones test instead."\n'
 '            return(list(GBJ = BJ_output$BJ, GBJ_pvalue = '
 'BJ_output$BJ_pvalue, \n'
 '                err_code = GBJ_err_code))\n'
 '        }\n'
 '        else if (sum(pairwise_cors) < 0) {\n'
 '            GBJ_err_code <- "2: Error in numerical routines. Many apologies, '
 'please report to developer! Returning standard Berk-Jones test instead."\n'
 '            return(list(GBJ = BJ_output$BJ, GBJ_pvalue = '
 'BJ_output$BJ_pvalue, \n'
 '                err_code = GBJ_err_code))\n'
 '        }\n'
 '        else {\n'
 '            GBJ_err_code <- "3: Unknown error. Many apologies, please report '
 'to developer! Returning standard Berk-Jones test instead."\n'
 '            return(list(GBJ = BJ_output$BJ, GBJ_pvalue = '
 'BJ_output$BJ_pvalue, \n'
 '                err_code = GBJ_err_code))\n'
 '        }\n'
 '    }\n'
 '    if (GBJ_corp < 0) {\n'
 '        BJ_output <- BJ(test_stats = t_vec, pairwise_cors = pairwise_cors)\n'
 '        if (gbj >= 20) {\n'
 '            GBJ_err_code <- "1: Pvalue likely less than 10^(-12), R/C++ not '
 'enough precision. Returning standard Berk-Jones test instead."\n'
 '            return(list(GBJ = BJ_output$BJ, GBJ_pvalue = '
 'BJ_output$BJ_pvalue, \n'
 '                err_code = GBJ_err_code))\n'
 '        }\n'
 '        else {\n'
 '            GBJ_err_code <- "3: Unknown error. Many apologies, please report '
 'to developer! Returning standard Berk-Jones test instead."\n'
 '            return(list(GBJ = BJ_output$BJ, GBJ_pvalue = '
 'BJ_output$BJ_pvalue, \n'
 '                err_code = GBJ_err_code))\n'
 '        }\n'
 '    }\n'
 '    return(list(GBJ = gbj, GBJ_pvalue = GBJ_corp, err_code = 0))\n'
 '}\n'
 '<bytecode: 0x5581c4a52098>\n'
 '<environment: namespace:GBJ>\n'
 ' : 0.007640098200903999 min/snp')
'diagnostics/gbj 0 pvals out of bounds'
('function (test_stats, cor_mat = NULL, pairwise_cors = NULL) \n'
 '{\n'
 '    param_list <- parse_input(test_stats = test_stats, cor_mat = cor_mat, \n'
 '        pairwise_cors = pairwise_cors)\n'
 '    t_vec <- param_list$t_vec\n'
 '    pairwise_cors <- param_list$pairwise_cors\n'
 '    d <- length(t_vec)\n'
 '    if (sum(abs(pairwise_cors)) == 0) {\n'
 '        HC_output <- HC(test_stats = t_vec, pairwise_cors = pairwise_cors)\n'
 '        return(list(GHC = HC_output$HC, GHC_pvalue = HC_output$HC_pvalue, \n'
 '            err_code = 0))\n'
 '    }\n'
 '    i_vec <- 1:d\n'
 '    p_values <- 1 - pchisq(t_vec^2, df = 1)\n'
 '    GHC_stats <- (i_vec - d * p_values)/sqrt(calc_var_nonzero_mu(d = d, \n'
 '        t = t_vec, mu = 0, pairwise_cors = pairwise_cors))\n'
 '    ghc <- max(GHC_stats, na.rm = TRUE)\n'
 '    if (ghc <= 0) {\n'
 '        return(list(GHC = ghc, GHC_pvalue = 1, err_code = 0))\n'
 '    }\n'
 '    GHC_p_bounds <- rep(NA, d)\n'
 '    if (ghc > 10) {\n'
 '        my_tol <- (-100)\n'
 '    }\n'
 '    else {\n'
 '        my_tol <- (-12)\n'
 '    }\n'
 '    GHC_lowerbound <- 10^(-20)\n'
 '    for (kkk in 1:d) {\n'
 '        temp_ghc <- tryCatch(uniroot(GHC_objective, k = kkk, \n'
 '            d = d, offset = ghc, pairwise_cors = pairwise_cors, \n'
 '            lower = GHC_lowerbound, upper = (1 - 10^(-12)), tol = '
 '(10^(my_tol))), \n'
 '            error = function(e) e, warning = function(w) w)\n'
 '        if (length(class(temp_ghc)) > 1) {\n'
 '            if (ghc >= 2e+05) {\n'
 '                HC_output <- HC(test_stats = t_vec, pairwise_cors = '
 'pairwise_cors)\n'
 '                GHC_err_code <- "1: Pvalue likely less than 10^(-12), R/C++ '
 'not enough precision. Returning standard Higher Criticism test instead."\n'
 '                return(list(GHC = HC_output$HC, GHC_pvalue = '
 'HC_output$HC_pvalue, \n'
 '                  err_code = GHC_err_code))\n'
 '            }\n'
 '            else if (sum(pairwise_cors) < 0) {\n'
 '                HC_output <- HC(test_stats = t_vec, pairwise_cors = '
 'pairwise_cors)\n'
 '                GHC_err_code <- "2: Error in numerical routines. Many '
 'apologies, please report to developer! Returning standard Higher Criticism '
 'test instead."\n'
 '                return(list(GHC = HC_output$HC, GHC_pvalue = '
 'HC_output$HC_pvalue, \n'
 '                  err_code = GHC_err_code))\n'
 '            }\n'
 '            else {\n'
 '                HC_output <- HC(test_stats = t_vec, pairwise_cors = '
 'pairwise_cors)\n'
 '                GHC_err_code <- "3: Unknown error. Many apologies, please '
 'report to developer! Returning standard Higher Criticism test instead."\n'
 '                return(list(GHC = HC_output$HC, GHC_pvalue = '
 'HC_output$HC_pvalue, \n'
 '                  err_code = GHC_err_code))\n'
 '            }\n'
 '        }\n'
 '        GHC_p_bounds[kkk] <- temp_ghc$root\n'
 '        GHC_lowerbound <- GHC_p_bounds[kkk]\n'
 '    }\n'
 '    GHC_z_bounds <- qnorm(1 - GHC_p_bounds/2)\n'
 '    GHC_z_bounds <- sort(GHC_z_bounds, decreasing = F)\n'
 '    GHC_z_bounds[which(GHC_z_bounds > 8.2)] = 8.2\n'
 '    if (sum(abs(pairwise_cors)) == 0) {\n'
 '        GHC_corp <- ebb_crossprob_cor_R(d = d, bounds = GHC_z_bounds, \n'
 '            correlations = rep(-999, 2))\n'
 '    }\n'
 '    else {\n'
 '        GHC_corp <- ebb_crossprob_cor_R(d = d, bounds = GHC_z_bounds, \n'
 '            correlations = pairwise_cors)\n'
 '    }\n'
 '    if (is.na(GHC_corp)) {\n'
 '        if (ghc >= 20) {\n'
 '            HC_output <- HC(test_stats = t_vec, pairwise_cors = '
 'pairwise_cors)\n'
 '            GHC_err_code <- "1: Pvalue likely less than 10^(-12), R/C++ not '
 'enough precision. Returning standard Higher Criticism test instead."\n'
 '            return(list(GHC = HC_output$HC, GHC_pvalue = '
 'HC_output$HC_pvalue, \n'
 '                err_code = GHC_err_code))\n'
 '        }\n'
 '        else if (sum(pairwise_cors) < 0) {\n'
 '            HC_output <- HC(test_stats = t_vec, pairwise_cors = '
 'pairwise_cors)\n'
 '            GHC_err_code <- "2: Error in numerical routines. Many apologies, '
 'please report to developer! Returning standard Higher Criticism test '
 'instead."\n'
 '            return(list(GHC = HC_output$HC, GHC_pvalue = '
 'HC_output$HC_pvalue, \n'
 '                err_code = GHC_err_code))\n'
 '        }\n'
 '        else {\n'
 '            HC_output <- HC(test_stats = t_vec, pairwise_cors = '
 'pairwise_cors)\n'
 '            GHC_err_code <- "3: Unknown error. Many apologies, please report '
 'to developer! Returning standard Higher Criticism test instead."\n'
 '            return(list(GHC = HC_output$HC, GHC_pvalue = '
 'HC_output$HC_pvalue, \n'
 '                err_code = GHC_err_code))\n'
 '        }\n'
 '    }\n'
 '    return(list(GHC = ghc, GHC_pvalue = GHC_corp, err_code = 0))\n'
 '}\n'
 '<bytecode: 0x5581c4adf728>\n'
 '<environment: namespace:GBJ>\n'
 ' : 0.011080816056993273 min/snp')
'diagnostics/ghc 0 pvals out of bounds'
