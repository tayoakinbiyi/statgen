To compile genomedrop use:

g++ -o gdrop -std=c++11 -O4 main.cpp genedrop.cpp -lm

Note that genomedrop requires a compiler that meets some of the c++11
standard. Probably GCC >= 4.4 will suffice.

The following command line arguments are used:
-p parameterfile      This is a required argument. It specifies the name of
   		      the parameter file.
-s number	      This is a required argument. An integer specfying the
   		      random number seed.
-o outputfile	      The basename for the output file. If this is not
   		      specified the parameter file name is used.

Example usage:

gdrop -p test.drop -s 1

Files:
For all input files, lines that begin with the '#' character (without the quotes)
are ignored by the program.

Parameter file. The first line is the name of the pedigree file. The second line
is the name of the study sample file. The third line is the name of the map file.
The fourth line is the probability that a genotype is missing. The fifth line is
the probability that any particular allele has been mistyped (i.e. the genotype
output by the program for some person and locus will be an error). For each line,
characters up to the first white space are read. All following characters are 
ignored. Currently missingness and errors are not implemented (v0.1).

Pedigree file. First column is a unique ID for an individual. The ID may be any 
set of alphanumeric characters except the number 0. The second column is the ID
of the first parent of the individual and the third column is the ID of the second
parent of the individual. The fourth column is the sex of the individual and may be
any character or alphanumeric string. Genomedrop currently ignores sex and will not
distinguish between males and females (an ID is allowed to occur in either or both
of the parent columns). Additional data after the sex column may be included in the file
and will be ignored. If an individual is a founder, both parent IDs must be 0. If the
individual is not a founder neither parent ID may be 0. The pedigree must be sorted
so that an individual does not appear before a parent.

Sample file. A list of whitespace separated IDs. The IDs may appear on one line or 
over multiple lines.

Map file. The first column of the map file is the chromosome name. The second column
is the length (in cM) of that chromosome. The third column is the spacing between 
markers of tha chromosome (in cM). The fourth column is the minor allele frequency
for all markers on that chromosome. Each chromosome will have at least one marker.
If only one marker is desired, make the spacing larger than the length.

Output files:
If the -o command line option is specified, the basename for the output files is the
argument to this option. If -o is not used the basename is the parameter file name 
appended with the random number seed. This allows one to use the same parameter file
repeatedly with different random number seeds without the outputs overwriting each
other.

True genotype file. Each line gives data for a marker, including the chromosome name,
marker name (marker names are "c<chromosome>s<number>"), cM position on the chromosome,
number of base pairs from the beginning of the genome (assuming 1cM = 1Mb), columns with
the true genotypes for the individuals specified in the sample file. True genotypes
indicate which founder alleles a subject has. A founder allele are unique integers
assigned to each founder in the order they appear in the pedigree. So, the first 
founder has alleles 1 and 2, and the second founder has alleles 3 and 4. Other subjects
who have genotypes with these alleles have, therefore, inherited from these founders
(through other individuals between the founders and that subject).

Genotype file. This has the same basic format as the true genotype file, but instead
of the true (founder allele) genotypes, observed genotypes are recorded. Each observed
genotype has a probability of being missing or having having one or both of its alleles
in error, with the probabilities given in the parameter file. Note that both the observed
and true genotypes are phased. Currently missingness and errors are not implemented (v0.1).

Log file. Information from the simulation, including the command line used so that
the analysis can be repeated.
