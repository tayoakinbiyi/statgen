def myMain(mainDef):
    colors=[(1,0,0),(0,1,0),(0,0,1),(1,1,0),(1,0,1),(0,1,1),(.5,.5,.5),(0,.5,0),(.5,0,0),(0,0,.5)]
    ellDSet=[.1,.5]
    
    numSubjects=200
    numTraits=300

    #['etaSq','numSubjects','numTraits','numSnps']
    #['realSnps','pedigreeSnps','randSnps','indepTraits','depTraits','quantNorm','stdNorm','noNorm']
    #['indepTraits','depTraits']
    #['gemma','fast','lmm','lm','ped','bimbam','bed']
    #['gemmaStd','gemmaCentral','fast','bed','bimbam','ped']
    local=os.getcwd()+'/'
    ops={
        'file':sys.argv[0],
        'numCores':cpu_count(),
        'colors':colors,
        'refReps':1e6,    
        'simLearnType':'Full',
        'response':'hipRaw',
        'numSnpChr':18,
        'numTraitChr':21,
        'muEpsRange':[],
        'maxSnpGen':5000,
        'transOnly':False,
        'YSeed':0,
        'snpsSeed':0,
        'logSource':True,
        'local':local
    }
    

    #######################################################################################################
    
    offDiag=np.array([0]*int(numTraits*(numTraits-1)/2))
    stat=ELL.ell.ell(np.array([.1,.5]),offDiag)

    #######################################################################################################

    #stat.load()
    stat.fit(10*numTraits,1000*numTraits,3000,1e-6) # numLamSteps0,numLamSteps1,numEllSteps,minEll
    stat.save('ref')

    refELL=stat.score(norm.rvs(size=[int(1e6),numTraits]))
    
    #######################################################################################################

    count=0
    
    parms=setupFolders({},ops)
    
    ref={}
    subprocess.call(['rm','-rf','diagnosticsAll'])
    subprocess.call(['mkdir','diagnosticsAll'])
    for exp in [{'soft':soft,'eta':eta,'fmt':fmt} for soft in ['gemma','fast'] for eta in [0,.25,.5,.75] for fmt in 
                ['ped','bed','bimbam'] if not ((fmt=='ped' and soft=='gemma') or (fmt=='bimbam' and soft=='fast'))]:
        os.chdir(local+ops['file'][:-3])
        np.random.seed(27)
        ctrl={
            'count':count,
            'parms':[exp['eta'],numSubjects,numTraits,[5000,500]],
            'sim':['indepTraits','randSnps','noNorm'],
            'ell':'indepTraits',
            'reg':[exp['soft'],'lmm',exp['fmt']],
            'grm':['gemma','std']
        }
        parms={**ctrl,**ops}
        
        ref[count]=ctrl.copy()

        subprocess.call(['rm','-f','log'])
        DBLog(json.dumps(ctrl,indent=3))
        
        DBCreateFolder('grm',parms)
        DBCreateFolder('inputs',parms)
        makeSimInputFiles(parms)
        
        #######################################################################################################

        DBCreateFolder('score',parms)
        genZScores(parms,[len([ctrl['sim'][-1]])])

        #######################################################################################################

        z=np.loadtxt('score/waldStat-2',delimiter='\t')
        eta=np.loadtxt('score/eta-2',delimiter='\t')

        #######################################################################################################

        DBCreateFolder('diagnostics',parms)
        plotZ(z)
        
        fig,axs=plt.subplots(1,1)
        fig.set_figwidth(10,forward=True)
        fig.set_figheight(10,forward=True)
        axs.scatter(np.log(np.mean(eta,axis=0)),np.mean(z**2,axis=0))
        axs.set_title('traitMean z**2 ~ eta')
        axs.axvline(x=exp['eta'])
        axs.axhline(y=1)
        fig.savefig('diagnostics/zVsEta.png')
        
        #######################################################################################################

        score=stat.score(z)

        #######################################################################################################

        monteCarlo=stat.monteCarlo(refELL,score)

        #######################################################################################################

        markov=stat.markov(score)

        #######################################################################################################

        plotPower(monteCarlo,parms,'mc',['mc-'+str(x) for x in ellDSet])
        plotPower(markov,parms,'markov',['markov-'+str(x) for x in ellDSet])

        #######################################################################################################

        nm='diagnosticsAll/'+str(count)
        subprocess.call(['rm','-rf',nm])
        subprocess.call(['mv','-Tf','diagnostics',nm])
        subprocess.call(['mv','log',nm])

        count+=1

    with open('diagnosticsAll/log','w+') as f:
        f.write(json.dumps(ref))

    subprocess.call(['rm','-rf','diagnostics'])
    subprocess.call(['mv','-T','diagnosticsAll','diagnostics'])
    
    DBFinish(local,mainDef)
