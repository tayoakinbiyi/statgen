b"def myMain(mainDef):\n    colors=[(1,0,0),(0,1,0),(0,0,1),(1,1,0),(1,0,1),(0,1,1),(.5,.5,.5),(0,.5,0),(.5,0,0),(0,0,.5)]\n    ellDSet=[.1,.5]\n    \n    local=os.getcwd()+'/'\n    ops={\n        'file':sys.argv[0],\n        'numCores':cpu_count(),\n        'colors':colors,\n        'refReps':1e6,    \n        'simLearnType':'Full',\n        'response':'hipRaw',\n        'numSnpChr':18,\n        'numTraitChr':21,\n        'muEpsRange':[],\n        'maxSnpGen':5000,\n        'transOnly':False,\n        'YSeed':0,\n        'snpsSeed':0,\n        'logSource':True,\n        'local':local\n    }\n    \n    #['etaSq','numSubjects','numTraits','numSnps']\n    #['realSnps','pedigreeSnps','randSnps','iidSnps','grmSnps','indepTraits','depTraits','quantNorm','stdNorm','noNorm']\n    #['indepTraits','depTraits']\n    #['gemma','fast','limix','lmm','lm','ped','bimbam','bed']\n    #['gemmaStd','gemmaCentral','fast','limix','bed','bimbam','ped']\n    ctrl={\n        'parms':[0.8,800,300,[2000,500]],\n        'sim':['indepTraits','pedigreeSnps','noNorm'],\n        'ell':'indepTraits',\n        'reg':['limix','lmm','bimbam'],\n        'grm':['limix','std']\n    }\n    parms=setupFolders(ctrl,ops)\n    numSnps=ctrl['parms'][-1]\n\n    subprocess.call(['rm','-f','log'])\n    \n    DBCreateFolder('grm',parms)\n    DBCreateFolder('inputs',parms)\n    makeSimInputFiles(parms)\n    \n    #######################################################################################################\n\n    DBCreateFolder('score',parms)\n    genZScores(parms,[len(numSnps)])\n    \n    #######################################################################################################\n\n    z=np.loadtxt('score/waldStat-'+str(len(numSnps)),delimiter='\\t')\n    eta=np.loadtxt('score/eta-'+str(len(numSnps)),delimiter='\\t')[0]\n    Y=np.loadtxt('inputs/Y.phe',delimiter='\\t')[:,2:]\n    zRef=norm.rvs(size=[int(parms['parms'][-1][-1]),int(parms['parms'][2])])\n    \n    #######################################################################################################\n\n    DBCreateFolder('diagnostics',parms)\n    \n    plotZ(z,prefix='z-')\n    plotZ(Y,prefix='y-')\n    plotCorr(np.loadtxt('grm/gemma-1',delimiter='\\t'),'grm')\n\n    fig,axs = plt.subplots(1,1,dpi=50)   \n    fig.set_figwidth(10,forward=True)\n    fig.set_figheight(10,forward=True)\n    axs.hist(np.log(eta),bins=30)\n    axs.set_title('eta')\n    axs.set_xlabel('eta')\n    if parms['parms'][0]>0:\n        axs.axvline(x=np.log(parms['parms'][0]),color='k')\n    fig.savefig('diagnostics/eta.png')\n    \n    #######################################################################################################\n    \n    maxD=int(np.max(ellDSet)*parms['parms'][2])\n    numTraits=parms['parms'][2]\n    ell=np.empty(shape=[parms['parms'][-1][-1],maxD])\n    pvals=np.sort(2*norm.sf(np.abs(z)))\n    for i in range(maxD):\n        ell[:,i]=beta.cdf(pvals[:,i],i+1,numTraits-i)\n    ell=np.min(ell,axis=1)\n    \n    ellRef=np.empty(shape=[parms['parms'][-1][-1],int(np.max(ellDSet)*parms['parms'][2])])\n    pvals=np.sort(2*norm.sf(np.abs(zRef)))\n    for i in range(maxD):\n        ellRef[:,i]=beta.cdf(pvals[:,i],i+1,numTraits-i)\n    ellRef=np.sort(np.min(ellRef,axis=1))\n        \n    monteCarlo=np.empty(shape=len(ell))\n    sortOrd=np.argsort(ell,axis=0)\n    monteCarlo[sortOrd]=(1+np.searchsorted(ellRef,ell[sortOrd]))/(len(ellRef)+1)\n    \n    '''\n    stat=ELL.ell.ell(np.array([.1,.5]),parms['parms'][2])\n    monteCarlo=stat.monteCarlo(ellRef,ell)\n    if 'depTraits' in parms['ell']:\n        offDiag=np.corrcoef(z,rowvar=False)[np.triu_indices(parms['parms'][2],1)]\n    if 'indepTraits' in parms['ell']:\n        offDiag=np.array([0]*int(parms['parms'][2]*(parms['parms'][2]-1)/2))\n        \n    stat.fit(10*parms['parms'][2],1000*parms['parms'][2],3000,1e-6,offDiag) # numLamSteps0,numLamSteps1,numEllSteps,minEll\n\n    #######################################################################################################\n    \n    refELL=stat.score(zRef)\n    score=stat.score(z)\n\n    #######################################################################################################\n\n    monteCarlo=stat.monteCarlo(refELL,score)\n\n    #######################################################################################################\n\n    markov=stat.markov(refELL)\n\n    #######################################################################################################\n    '''\n    cross=plotPower(monteCarlo,parms,'mc',['mc'])\n    DBFinish(local,mainDef)\n"